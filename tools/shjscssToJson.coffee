cssom = require 'cssom'
fs    = require 'fs'
_     = require 'underscore'


raw_template = """
               define(function(){

                   'use strict';

                   /* Generated by SHJS CSS to Theme converter.
                    * Theme Name: <%= name.replace('.js', '').replace('theme_', '') %>
                    * Converted at: <%= new Date() %>
                    * Converted from: <%= filename %>
                    */

                   var theme = <%= json %>;

                   return {
                       theme: theme
                   };
               });
               """

tmpl = _.template raw_template

convert = (_styles) ->
    rules = cssom.parse _styles
    rules = rules.cssRules ? []

    styles = {}

    for rule in rules
        selector = rule.selectorText
        
        if selector is 'pre.sh_sourceCode'
            styles.default = {}
            for name in rule.style
                styles.default[name] = rule.style[name]
        else
            selector = selector.replace 'pre.sh_sourceCode .sh_', ''

            if selector is ''
                console.log "empty selector"
            
            selectors = [selector]
            if /,{1}/g.test selector
                selectors = (s.trim() for s in selector.split(/,{1}/g))

            for s in selectors
                styles[s] = styles[s] ? {}
                for name in rule.style
                    styles[s][name] = rule.style[name]
    styles


ls = (dirname=__dirname) ->
    try
        filenames = fs.readdirSync dirname
    catch e
        console.warn e.message
        return []
    filenames

# all non-minified css files
cssOnly = (filenames) -> (filename for filename in filenames when /^(?:sh_)?(.(?!min))+(?:\.css)$/i.test filename)

cssFilenames = ->
    cssOnly ls()

readFile = (filename) ->
    try
        contents = fs.readFileSync filename, 'utf8'
    catch e
        console.warn e.message
        return null
    contents


getCSS = ->
    filenames = cssFilenames()
    css       = {}

    for filename in filenames
        contents = readFile filename
        if contents?
            css[filename] = contents

    css

formatJSON = (obj) ->
    json = JSON.stringify obj, null, "    "
    lines = json.split '\n'
    for line, i in lines
        continue if i is 0
        lines[i] = "    #{line}"
    lines.join '\n'

main = ->
    for filename, contents of getCSS()
        json = convert contents
        json = formatJSON json
        name = "theme_#{filename.replace /^(sh_)?(.+)(\.min)?\.css$/, '$2'}.js"
        out = tmpl { json, filename, name }
        do ->
            _filename = name
            fs.writeFile name, out, 'utf8', (err) ->
                if err?
                    console.warn "Couldn't write #{_filename}."
                else
                    console.log "Successfully wrote #{_filename}."

main()


